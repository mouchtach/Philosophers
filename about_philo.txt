1 .Basic Thread Management
a) Creating a Thread
pthread_create(): Katkhdem lthread jdid, w katchouf function li ghadi t3ayet lik mn fawk.


int pthread_create(pthread_t *thread, const pthread_attr_t *attr,  void *(*start_routine) (void *), void *arg);
Arguments:

pthread_t *thread: a pointer to a pthread_t variable, this will hold the thread ID.

pthread_attr_t *attr: used to set thread attributes (you can pass NULL for default).

start_routine: the function that the thread will execute.

void *arg: argument passed to the start function.

Example:

pthread_create(&philosopher->thread, NULL, routine, (void *)philosopher);
This will create a new thread to execute the routine function and pass philosopher as an argument to it.

2. Waiting for Thread Completion
b) Joining a Thread
pthread_join(): Katkhdem bach tsnna wa7d lthread ykhdem w ytkml.

int pthread_join(pthread_t thread, void **retval);
Arguments:

pthread_t thread: the thread ID you want to join.

void **retval: pointer where the return value of the thread will be stored (you can pass NULL if you don’t need it).

Example:

pthread_join(philosopher->thread, NULL);
This waits for the thread philosopher->thread to finish its work before moving to the next line.

3. Mutexes (To Avoid Race Conditions)
c) Mutex Initialization
pthread_mutex_init(): Kat7ll mutex bach ts7a9 laccess 3la lresource li kaymchi f multi-threading.


int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
Arguments:

pthread_mutex_t *mutex: pointer to the mutex you want to initialize.

pthread_mutexattr_t *attr: used to set mutex attributes (you can pass NULL for default).

Example:

pthread_mutex_init(&print_mutex, NULL);
This initializes print_mutex to protect print statements across threads.

d) Locking Mutex
pthread_mutex_lock(): Kat7bss mutex bach tdir lblock 3la lresource li katst3ml (for example, printing).

int pthread_mutex_lock(pthread_mutex_t *mutex);
Arguments:

pthread_mutex_t *mutex: the mutex to lock.

Example:

pthread_mutex_lock(&print_mutex);
e) Unlocking Mutex
pthread_mutex_unlock(): Kat7ll mutex bach t9dar t9ra lresource men ba3d l7bs.

int pthread_mutex_unlock(pthread_mutex_t *mutex);
Arguments:

pthread_mutex_t *mutex: the mutex to unlock.

Example:

pthread_mutex_unlock(&print_mutex);
4. Sleep Functions
f) Thread Sleep
usleep(): Used to sleep for a specified amount of time (microseconds). usleep() is not part of pthread.h, but it is commonly used in multi-threading to introduce delays.

int usleep(useconds_t usec);
Arguments:

useconds_t usec: number of microseconds to sleep.

5. Thread Termination
g) Thread Exit
pthread_exit(): This function terminates the current thread.

void pthread_exit(void *retval);
Arguments:

retval: value returned by the thread when it finishes (usually NULL if not needed).

Example:

pthread_exit(NULL);
Recap: Functions you'll use from pthread.h:
pthread_create(): to create threads.

pthread_join(): to wait for thread completion.

pthread_mutex_init(): to initialize a mutex.

pthread_mutex_lock(): to lock a mutex.

pthread_mutex_unlock(): to unlock a mutex.

usleep(): to make a thread sleep for a given time.

pthread_exit(): to exit a thread.

Bonus:
You can also use pthread_mutex_destroy() to destroy mutexes when you're done with them, but it's not required during execution — it's mostly for cleanup after threads finish their work.
```